# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|

  # check if all plugins are present
  validate_plugins || exit(1)

  # box template
  config.vm.box = "debian/jessie64"

  # check version of guest additions, disable if there are issues
  config.vbguest.auto_update = true

  # Set ressources
  config.vm.provider "virtualbox" do |v|
    v.memory = 1024
    v.cpus = 1
  end

  # Configure network
  config.hostmanager.enabled = true
  config.hostmanager.manage_host = true
  config.hostmanager.manage_guest = true
  config.hostmanager.ignore_private_ip = false
  config.hostmanager.include_offline = true

  #config.vm.network "private_network", ip: "192.168.2.10"
  config.vm.network "public_network"
  config.vm.network "forwarded_port", guest: 22, host: 10022
  config.vm.network "forwarded_port", guest: 5050, host: 5050
  config.vm.network "forwarded_port", guest: 5051, host: 5051
  config.vm.network "forwarded_port", guest: 8080, host: 8080
  config.vm.hostname = "master-jessie.mesos"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL

    # Activate debug
    set -x

    export DEBIANFRONTEND=noninteractive

    # Add the repository and update index
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv E56151BF
    export DISTRO=$(lsb_release -is | tr '[:upper:]' '[:lower:]')
    export CODENAME=$(lsb_release -cs)

    # Add repos
    echo "deb http://ftp.de.debian.org/debian jessie-backports main"    | tee -a /etc/apt/sources.list
    echo "deb http://repos.mesosphere.com/${DISTRO} ${CODENAME} main"   | tee /etc/apt/sources.list.d/mesosphere.list
    apt-get update -y
    apt-get upgrade -y

    # Install java 8
    apt-get install -y openjdk-8-jre -t jessie-backports

    # Fix locale for french
    echo -e 'LANG="fr_FR.UTF-8"\nLANGUAGE="fr_FR:fr"\nLC_ALL="fr_FR"\n' > /etc/default/locale
    locale-gen fr_FR.UTF-8

    # Add various helpers
    apt-get install -y vim byobu curl wget openssh-server ranger zsh git

    # change root password
    echo root:azerty | chpasswd

    # Add oh my zsh for root
    cd /root && git clone https://github.com/robbyrussell/oh-my-zsh .oh-my-zsh
    cp /vagrant/zshrc /root/.zshrc
    chsh -s /bin/zsh

    # Install Mesos and frameworks
    apt-get install -y mesos marathon chronos
    apt-get install -y zookeeper zookeeperd -t jessie-backports

    # Install Docker
    curl -fsSL get.docker.com | sh

    # Add docker group to vagrant user
    usermod -aG docker vagrant

    # Install docker compose
    apt-get install -y python-pip -t jessie-backports
    pip install docker-compose

    # Add startup script
    cp /vagrant/rc.local /etc/rc.local
    chmod +x /etc/rc.local

  SHELL
end


def validate_plugins
  required_plugins = ['vagrant-hostmanager', 'vagrant-vbguest']
  missing_plugins = []

  required_plugins.each do |plugin|
    unless Vagrant.has_plugin?(plugin)
      missing_plugins << "The '#{plugin}' plugin is required. Install it with 'vagrant plugin install #{plugin}'"
    end
  end

  unless missing_plugins.empty?
    missing_plugins.each { |x| UI.error x }
    return false
  end

  true
end
